"use client";

import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import Link from "next/link";
import Image from "next/image";
import { useCarousel } from "@/hooks/useCarousel";
import { Skeleton } from "@/components/ui/skeleton";
import { useGetCoursesQuery } from "@/state/api";
import { useRouter } from "next/navigation";
import CourseCardSearch from "@/components/CourseCardSearch";
import { useUser } from "@clerk/nextjs";
import emailjs from "@emailjs/browser";
import {
	Mail,
	Phone,
	MapPin,
	BookOpen,
	Users,
	Award,
	Star,
	Check,
	Sparkles,
	TrendingUp,
	Clock,
	Target,
	Zap,
	ArrowRight,
	Code,
	Lightbulb,
	Cpu,
	Rocket,
	Heart,
	Shield,
} from "lucide-react";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";

const LoadingSkeleton = () => {
	return (
		<div className="landing-skeleton">
			<div className="landing-skeleton__hero">
				<div className="landing-skeleton__hero-content">
					<Skeleton className="landing-skeleton__title" />
					<Skeleton className="landing-skeleton__subtitle" />
					<Skeleton className="landing-skeleton__subtitle-secondary" />
					<Skeleton className="landing-skeleton__button" />
				</div>
			</div>

			<div className="landing-skeleton__featured">
				<Skeleton className="landing-skeleton__featured-title" />
				<Skeleton className="landing-skeleton__featured-description" />

				<div className="landing-skeleton__tags">
					{[1, 2, 3, 4, 5].map((_, index) => (
						<Skeleton key={index} className="landing-skeleton__tag" />
					))}
				</div>

				<div className="landing-skeleton__courses">
					{[1, 2, 3, 4].map((_, index) => (
						<Skeleton key={index} className="landing-skeleton__course-card" />
					))}
				</div>
			</div>
		</div>
	);
};

// Advanced Typewriter effect component with multiple phrases and cursor
const AdvancedTypewriter = ({
	phrases,
	speed = 100,
	deleteSpeed = 50,
	delayBetweenPhrases = 2000,
	initialDelay = 1000,
}: {
	phrases: string[];
	speed?: number;
	deleteSpeed?: number;
	delayBetweenPhrases?: number;
	initialDelay?: number;
}) => {
	const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0);
	const [currentText, setCurrentText] = useState("");
	const [isDeleting, setIsDeleting] = useState(false);
	const [showCursor, setShowCursor] = useState(true);
	const [hasStarted, setHasStarted] = useState(false);

	useEffect(() => {
		// Initial delay before starting typewriter
		const initialTimeout = setTimeout(() => {
			setHasStarted(true);
		}, initialDelay);

		return () => clearTimeout(initialTimeout);
	}, [initialDelay]);

	useEffect(() => {
		if (!hasStarted) return;

		const currentPhrase = phrases[currentPhraseIndex];

		let timeout: NodeJS.Timeout;

		if (!isDeleting && currentText === currentPhrase) {
			// Pause before starting to delete
			timeout = setTimeout(() => setIsDeleting(true), delayBetweenPhrases);
		} else if (isDeleting && currentText === "") {
			// Move to next phrase
			setIsDeleting(false);
			setCurrentPhraseIndex((prev) => (prev + 1) % phrases.length);
		} else {
			// Typing or deleting
			timeout = setTimeout(
				() => {
					setCurrentText((prev) => {
						if (isDeleting) {
							return currentPhrase.substring(0, prev.length - 1);
						} else {
							return currentPhrase.substring(0, prev.length + 1);
						}
					});
				},
				isDeleting ? deleteSpeed : speed
			);
		}

		return () => clearTimeout(timeout);
	}, [currentText, isDeleting, currentPhraseIndex, phrases, speed, deleteSpeed, delayBetweenPhrases, hasStarted]);

	// Cursor blinking effect
	useEffect(() => {
		const cursorInterval = setInterval(() => {
			setShowCursor((prev) => !prev);
		}, 500);

		return () => clearInterval(cursorInterval);
	}, []);

	return (
		<span>
			{currentText}
			<span className={`${showCursor ? "opacity-100" : "opacity-0"} transition-opacity duration-100`}>|</span>
		</span>
	);
};

const Landing = () => {
	const router = useRouter();
	const { data: courses, isLoading, isError } = useGetCoursesQuery({});
	const [contactForm, setContactForm] = useState({
		name: "",
		email: "",
		message: "",
	});
	const [isSubmitting, setIsSubmitting] = useState(false);
	const [buttonText, setButtonText] = useState("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
	const [buttonClass, setButtonClass] = useState("");

	const handleCourseClick = (courseId: string) => {
		router.push(`/search?id=${courseId}`, {
			scroll: false,
		});
	};

	const handleContactSubmit = async (e: React.FormEvent) => {
		e.preventDefault();
		setIsSubmitting(true);

		try {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
			const serviceId = process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID;
			const templateId = process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID;
			const publicKey = process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY;

			if (!serviceId || !templateId || !publicKey) {
				console.error("EmailJS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
				console.log("Service ID:", serviceId);
				console.log("Template ID:", templateId);
				console.log("Public Key:", publicKey);
				setButtonText("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
				setButtonClass("error");
				setTimeout(() => {
					setButtonText("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
					setButtonClass("");
				}, 3000);
				return;
			}

			const templateParams = {
				from_name: contactForm.name,
				from_email: contactForm.email,
				message: contactForm.message,
				time: new Date().toLocaleString("ru-RU", {
					timeZone: "Asia/Tashkent",
					year: "numeric",
					month: "long",
					day: "numeric",
					hour: "2-digit",
					minute: "2-digit",
				}),
				to_email: "vazebyte@gmail.com",
			};

			console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ EmailJS:", {
				serviceId,
				templateId,
				templateParams,
			});

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ EmailJS
			const result = await emailjs.send(serviceId, templateId, templateParams, publicKey);

			console.log("‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ EmailJS:", result);

			// –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –∑–µ–ª–µ–Ω—É—é —Å —É—Å–ø–µ—à–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
			setButtonText("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üéâ");
			setButtonClass("success");
			setContactForm({ name: "", email: "", message: "" });

			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
			setTimeout(() => {
				setButtonText("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
				setButtonClass("");
			}, 3000);
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ EmailJS:", error);
			setButtonText("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏");
			setButtonClass("error");

			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
			setTimeout(() => {
				setButtonText("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
				setButtonClass("");
			}, 3000);
		} finally {
			setIsSubmitting(false);
		}
	};

	const faqData = [
		{
			question: "–ö–∞–∫ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ?",
			answer:
				"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫—É—Ä—Å –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ. –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
		},
		{
			question: "–ö–∞–∫–æ–≤–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤?",
			answer:
				"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—É—Ä—Å–∞. –£ –Ω–∞—Å –µ—Å—Ç—å –∫–∞–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã, —Ç–∞–∫ –∏ –ø–ª–∞—Ç–Ω—ã–µ. –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞.",
		},
		{
			question: "–ü–æ–ª—É—á—É –ª–∏ —è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞?",
			answer:
				"–î–∞, –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–ª–∏ —Ä–µ–∑—é–º–µ.",
		},
		{
			question: "–ö–∞–∫ –¥–æ–ª–≥–æ —É –º–µ–Ω—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫—É—Ä—Å–∞?",
			answer:
				"–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å–∞ —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∫—É—Ä—Å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –≤–∞—Å —Ç–µ–º–ø–µ.",
		},
		{
			question: "–ï—Å—Ç—å –ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞?",
			answer:
				"–î–∞, –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –≤–∞–º 24/7. –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏–ª–∏ —á–∞—Ç.",
		},
		{
			question: "–ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤?",
			answer:
				"–î–∞, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏, –µ—Å–ª–∏ –≤—ã –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã –∫–∞—á–µ—Å—Ç–≤–æ–º –∫—É—Ä—Å–∞.",
		},
		{
			question: "–ü–æ–¥—Ö–æ–¥—è—Ç –ª–∏ –∫—É—Ä—Å—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö?",
			answer:
				"–ö–æ–Ω–µ—á–Ω–æ! –£ –Ω–∞—Å –µ—Å—Ç—å –∫—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ - –æ—Ç –ø–æ–ª–Ω—ã—Ö –Ω–æ–≤–∏—á–∫–æ–≤ –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.",
		},
		{
			question: "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è?",
			answer:
				"–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–æ–≤, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –∏ —Ç–µ—Å—Ç–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ —É—á–∏—Ç—å—Å—è –≤ —Å–≤–æ–µ–º —Ç–µ–º–ø–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
		},
	];

	const benefits = [
		{
			icon: <BookOpen className="w-12 h-12 text-blue-600" />,
			title: "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
			description: "–ö—É—Ä—Å—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω—ã —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º",
		},
		{
			icon: <Users className="w-12 h-12 text-green-600" />,
			title: "–°–æ–æ–±—â–µ—Å—Ç–≤–æ",
			description: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏ –æ–±–º–µ–Ω–∏–≤–∞–π—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º",
		},
		{
			icon: <Award className="w-12 h-12 text-purple-600" />,
			title: "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
			description: "–ü–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∏–∑–Ω–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞",
		},
	];

	const stats = [
		{ number: "10,000+", label: "–°—Ç—É–¥–µ–Ω—Ç–æ–≤", icon: <Users className="w-8 h-8" /> },
		{ number: "150+", label: "–ö—É—Ä—Å–æ–≤", icon: <BookOpen className="w-8 h-8" /> },
		{ number: "50+", label: "–≠–∫—Å–ø–µ—Ä—Ç–æ–≤", icon: <Award className="w-8 h-8" /> },
		{ number: "95%", label: "–î–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", icon: <Star className="w-8 h-8" /> },
	];

	const features = [
		{ icon: <Clock className="w-6 h-6" />, text: "–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è" },
		{ icon: <Target className="w-6 h-6" />, text: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏" },
		{ icon: <Zap className="w-6 h-6" />, text: "–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã" },
		{ icon: <TrendingUp className="w-6 h-6" />, text: "–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç" },
	];

	// Floating icons for hero section
	const floatingIcons = [
		{ icon: <Code className="w-8 h-8" />, color: "text-blue-500", delay: 0 },
		{ icon: <Lightbulb className="w-10 h-10" />, color: "text-yellow-500", delay: 0.5 },
		{ icon: <Cpu className="w-7 h-7" />, color: "text-purple-500", delay: 1 },
		{ icon: <Rocket className="w-9 h-9" />, color: "text-red-500", delay: 1.5 },
		{ icon: <Heart className="w-6 h-6" />, color: "text-pink-500", delay: 2 },
		{ icon: <Shield className="w-8 h-8" />, color: "text-green-500", delay: 2.5 },
		{ icon: <Sparkles className="w-7 h-7" />, color: "text-indigo-500", delay: 3 },
		{ icon: <Award className="w-9 h-9" />, color: "text-orange-500", delay: 3.5 },
	];

	// Phrases for typewriter effect
	const typewriterPhrases = [
		"–æ–≥–Ω—ë–º –≤ –≥–ª–∞–∑–∞—Ö",
		"—Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–µ–π—Å–∞–º–∏",
		"–¥–≤–∏–∂–µ–Ω–∏–µ–º –≤–ø–µ—Ä—ë–¥",
		"–ª–∏–¥–µ—Ä–∞–º–∏ –æ—Ç—Ä–∞—Å–ª–∏",
		"–∂–µ–ª–∞–Ω–∏–µ–º —Ä–∞—Å—Ç–∏",
	];

	if (isLoading) return <LoadingSkeleton />;

	return (
		<motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.5 }} className="landing">
			{/* Hero Section - White with patterns */}
			<motion.div
				initial={{ y: 20, opacity: 0 }}
				animate={{ y: 0, opacity: 1 }}
				transition={{ duration: 0.5 }}
				className="landing__hero"
			>
				{/* Background pattern */}
				<div className="landing__hero-pattern"></div>

				{/* Floating icons */}
				<div className="landing__floating-icons">
					{floatingIcons.map((item, index) => (
						<motion.div
							key={index}
							initial={{ opacity: 0, scale: 0 }}
							animate={{
								opacity: 0.7,
								scale: 1,
								y: [0, -20, 0],
								rotate: [0, 10, -10, 0],
							}}
							transition={{
								opacity: { delay: item.delay, duration: 0.5 },
								scale: { delay: item.delay, duration: 0.5 },
								y: {
									delay: item.delay + 1,
									duration: 3,
									repeat: Infinity,
									ease: "easeInOut",
								},
								rotate: {
									delay: item.delay + 1,
									duration: 4,
									repeat: Infinity,
									ease: "easeInOut",
								},
							}}
							className={`landing__floating-icon landing__floating-icon--${index + 1} ${item.color}`}
						>
							{item.icon}
						</motion.div>
					))}
				</div>

				<div className="landing__hero-content">
					<motion.h1
						initial={{ y: 30, opacity: 0 }}
						animate={{ y: 0, opacity: 1 }}
						transition={{ duration: 0.6, delay: 0.2 }}
						className="landing__title"
					>
						–ò–∑—É—á–∞–π—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ —Å{" "}
						<span className="landing__title-highlight">
							<AdvancedTypewriter
								phrases={typewriterPhrases}
								speed={80}
								deleteSpeed={40}
								delayBetweenPhrases={3000}
								initialDelay={1000}
							/>
						</span>
					</motion.h1>

					<motion.p
						initial={{ y: 30, opacity: 0 }}
						animate={{ y: 0, opacity: 1 }}
						transition={{ duration: 0.6, delay: 2 }}
						className="landing__description"
					>
						–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –º–∏—Ä –∑–Ω–∞–Ω–∏–π —Å –Ω–∞—à–∏–º–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏. –£—á–∏—Ç–µ—Å—å –≤ —É–¥–æ–±–Ω–æ–º —Ç–µ–º–ø–µ, –ø–æ–ª—É—á–∞–π—Ç–µ
						—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ –∫–∞—Ä—å–µ—Ä—É.
					</motion.p>

					{/* Feature badges */}
					<motion.div
						initial={{ y: 30, opacity: 0 }}
						animate={{ y: 0, opacity: 1 }}
						transition={{ duration: 0.6, delay: 2.5 }}
						className="landing__features"
					>
						{features.map((feature, index) => (
							<motion.div
								key={index}
								initial={{ scale: 0 }}
								animate={{ scale: 1 }}
								transition={{ duration: 0.3, delay: 3 + index * 0.1 }}
								className="landing__feature"
							>
								{feature.icon}
								<span>{feature.text}</span>
							</motion.div>
						))}
					</motion.div>

					<motion.div
						initial={{ y: 30, opacity: 0 }}
						animate={{ y: 0, opacity: 1 }}
						transition={{ duration: 0.6, delay: 3.5 }}
						className="landing__cta"
					>
						<Link href="/search" scroll={false}>
							<div className="landing__cta-button landing__cta-button--primary">
								–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ
								<ArrowRight className="w-5 h-5 ml-2" />
							</div>
						</Link>
						<Link href="#about" scroll={false}>
							<div className="landing__cta-button landing__cta-button--secondary">–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ</div>
						</Link>
					</motion.div>
				</div>
			</motion.div>

			{/* Stats Section */}
			<motion.div
				initial={{ y: 20, opacity: 0 }}
				whileInView={{ y: 0, opacity: 1 }}
				transition={{ duration: 0.5 }}
				viewport={{ amount: 0.3, once: true }}
				className="landing__stats"
			>
				<div className="landing__stats-grid">
					{stats.map((stat, index) => (
						<motion.div
							key={index}
							initial={{ y: 20, opacity: 0 }}
							whileInView={{ y: 0, opacity: 1 }}
							transition={{ duration: 0.5, delay: index * 0.1 }}
							viewport={{ amount: 0.3, once: true }}
							className="landing__stat"
						>
							<div className="landing__stat-icon">{stat.icon}</div>
							<div className="landing__stat-number">{stat.number}</div>
							<div className="landing__stat-label">{stat.label}</div>
						</motion.div>
					))}
				</div>
			</motion.div>

			{/* Why Learn Section */}
			<motion.div
				id="about"
				initial={{ y: 20, opacity: 0 }}
				whileInView={{ y: 0, opacity: 1 }}
				transition={{ duration: 0.5 }}
				viewport={{ amount: 0.3, once: true }}
				className="landing__benefits"
			>
				<h2 className="landing__section-title">–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç —É—á–∏—Ç—å—Å—è —Å –Ω–∞–º–∏?</h2>
				<p className="landing__section-description">
					–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫—É—Ä—Å—ã, –∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é —ç–∫–æ—Å–∏—Å—Ç–µ–º—É –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
				</p>

				<div className="landing__benefits-grid">
					{benefits.map((benefit, index) => (
						<motion.div
							key={index}
							initial={{ y: 50, opacity: 0 }}
							whileInView={{ y: 0, opacity: 1 }}
							transition={{ duration: 0.5, delay: index * 0.2 }}
							viewport={{ amount: 0.3, once: true }}
							className="landing__benefit"
						>
							<div className="landing__benefit-icon">{benefit.icon}</div>
							<h3 className="landing__benefit-title">{benefit.title}</h3>
							<p className="landing__benefit-description">{benefit.description}</p>
						</motion.div>
					))}
				</div>

				<div className="landing__learning-advantages">
					<h3 className="landing__advantages-title">–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–Ω–ª–∞–π–Ω-–æ–±—É—á–µ–Ω–∏—è:</h3>
					<div className="landing__advantages-list">
						{[
							"–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ - —É—á–∏—Ç–µ—Å—å –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ",
							"–î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º 24/7",
							"–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç–µ–º–ø –æ–±—É—á–µ–Ω–∏—è",
							"–≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –¥–æ—Ä–æ–≥—É",
							"–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã",
							"–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
						].map((advantage, index) => (
							<motion.div
								key={index}
								initial={{ x: -20, opacity: 0 }}
								whileInView={{ x: 0, opacity: 1 }}
								transition={{ duration: 0.3, delay: index * 0.1 }}
								viewport={{ amount: 0.3, once: true }}
								className="landing__advantage-item"
							>
								<Check className="w-5 h-5 text-green-500" />
								<span>{advantage}</span>
							</motion.div>
						))}
					</div>
				</div>
			</motion.div>

			{/* Featured Courses */}
			<motion.div
				initial={{ y: 20, opacity: 0 }}
				whileInView={{ y: 0, opacity: 1 }}
				transition={{ duration: 0.5 }}
				viewport={{ amount: 0.3, once: true }}
				className="landing__featured"
			>
				<h2 className="landing__section-title">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É—Ä—Å—ã</h2>
				<p className="landing__section-description">
					–û—Ç –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è, –≤–æ –≤—Å–µ—Ö –æ—Ç—Ä–∞—Å–ª—è—Ö, —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å
				</p>

				<div className="landing__tags">
					{[
						"–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
						"backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
						"frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
						"—è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
						"UI/UX-–¥–∏–∑–∞–π–Ω",
						"–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω",
						"—Ü–∏—Ñ—Ä–æ–≤–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
						"–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
						"—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
						"—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å",
						"–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ",
						"Soft Skills",
						"–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫",
						"–ø—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è",
						"—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏",
						"—Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
						"–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
						"—Ä–∞–±–æ—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏",
						"–∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥",
						"—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä",
					].map((tag, index) => (
						<span key={index} className="landing__tag">
							{tag}
						</span>
					))}
				</div>

				<div className="landing__courses">
					{courses &&
						courses.slice(0, 8).map((course, index) => (
							<motion.div
								key={course.courseId}
								initial={{ y: 50, opacity: 0 }}
								whileInView={{ y: 0, opacity: 1 }}
								transition={{ duration: 0.5, delay: index * 0.2 }}
								viewport={{ amount: 0.4 }}
							>
								<CourseCardSearch course={course} onClick={() => handleCourseClick(course.courseId)} />
							</motion.div>
						))}
				</div>
			</motion.div>

			{/* FAQ Section with improved styling */}
			<motion.div
				initial={{ y: 20, opacity: 0 }}
				whileInView={{ y: 0, opacity: 1 }}
				transition={{ duration: 0.5 }}
				viewport={{ amount: 0.3, once: true }}
				className="landing__faq"
			>
				<h2 className="landing__section-title">–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h2>
				<p className="landing__section-description">–ù–∞–π–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ</p>

				<div className="landing__faq-container">
					<Accordion type="single" collapsible className="landing__faq-accordion">
						{faqData.map((faq, index) => (
							<AccordionItem key={index} value={`item-${index}`} className="landing__faq-item">
								<AccordionTrigger className="landing__faq-question">{faq.question}</AccordionTrigger>
								<AccordionContent className="landing__faq-answer">{faq.answer}</AccordionContent>
							</AccordionItem>
						))}
					</Accordion>
				</div>
			</motion.div>

			{/* Contact Form */}
			<motion.div
				initial={{ y: 20, opacity: 0 }}
				whileInView={{ y: 0, opacity: 1 }}
				transition={{ duration: 0.5 }}
				viewport={{ amount: 0.3, once: true }}
				className="landing__contact"
			>
				<h2 className="landing__section-title">–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏</h2>
				<p className="landing__section-description">–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!</p>

				<div className="landing__contact-content">
					<div className="landing__contact-info">
						<h3 className="landing__contact-info-title">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
						<div className="landing__contact-items">
							<div className="landing__contact-item">
								<Mail className="w-5 h-5 text-blue-600" />
								<span>vazebyte@gmail.com</span>
							</div>
							<div className="landing__contact-item">
								<Phone className="w-5 h-5 text-blue-600" />
								<span>+998 90 123 45 67</span>
							</div>
							<div className="landing__contact-item">
								<MapPin className="w-5 h-5 text-blue-600" />
								<span>–¢–∞—à–∫–µ–Ω—Ç, –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω</span>
							</div>
						</div>

						<div className="landing__contact-hours">
							<h4 className="landing__contact-hours-title">–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</h4>
							<p>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞: 9:00 - 18:00</p>
							<p>–°—É–±–±–æ—Ç–∞ - –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: 10:00 - 16:00</p>
						</div>
					</div>

					<form onSubmit={handleContactSubmit} className="landing__contact-form">
						<div className="landing__form-group">
							<label htmlFor="name" className="landing__form-label">
								–ò–º—è
							</label>
							<input
								type="text"
								id="name"
								value={contactForm.name}
								onChange={(e) => setContactForm({ ...contactForm, name: e.target.value })}
								className="landing__form-input"
								required
							/>
						</div>
						<div className="landing__form-group">
							<label htmlFor="email" className="landing__form-label">
								Email
							</label>
							<input
								type="email"
								id="email"
								value={contactForm.email}
								onChange={(e) => setContactForm({ ...contactForm, email: e.target.value })}
								className="landing__form-input"
								required
							/>
						</div>
						<div className="landing__form-group">
							<label htmlFor="message" className="landing__form-label">
								–°–æ–æ–±—â–µ–Ω–∏–µ
							</label>
							<textarea
								id="message"
								value={contactForm.message}
								onChange={(e) => setContactForm({ ...contactForm, message: e.target.value })}
								className="landing__form-textarea"
								rows={4}
								required
							></textarea>
						</div>
						<button
							type="submit"
							className={`landing__form-submit ${buttonClass ? `landing__form-submit--${buttonClass}` : ""}`}
							disabled={isSubmitting}
						>
							{isSubmitting ? "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è..." : buttonText}
						</button>
					</form>
				</div>
			</motion.div>
		</motion.div>
	);
};

export default Landing;
